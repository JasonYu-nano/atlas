if(CMAKE_GENERATOR_PLATFORM MATCHES "^[Ww][Ii][Nn]32$")
    set(ATLAS_TARGET_ARCH "X86")
elseif(CMAKE_GENERATOR_PLATFORM MATCHES "^[Xx]64$")
    set(ATLAS_TARGET_ARCH "X64")
elseif(CMAKE_GENERATOR_PLATFORM MATCHES "^[Aa][Rr][Mm]$")
    set(ATLAS_TARGET_ARCH "Arm")
elseif(CMAKE_GENERATOR_PLATFORM MATCHES "^[Aa][Rr][Mm]64$")
    set(ATLAS_TARGET_ARCH "Arm64")
else()
    if(CMAKE_GENERATOR STREQUAL "Visual Studio 14 2015 Win64")
        set(ATLAS_TARGET_ARCH "X64")
    elseif(CMAKE_GENERATOR STREQUAL "Visual Studio 14 2015 ARM")
        set(ATLAS_TARGET_ARCH "Arm")
    elseif(CMAKE_GENERATOR STREQUAL "Visual Studio 14 2015")
        set(ATLAS_TARGET_ARCH "X86")
    elseif(CMAKE_GENERATOR STREQUAL "Visual Studio 15 2017 Win64")
        set(ATLAS_TARGET_ARCH "X64")
    elseif(CMAKE_GENERATOR STREQUAL "Visual Studio 15 2017 ARM")
        set(ATLAS_TARGET_ARCH "Arm")
    elseif(CMAKE_GENERATOR STREQUAL "Visual Studio 15 2017")
        set(ATLAS_TARGET_ARCH "X86")
    elseif(CMAKE_GENERATOR STREQUAL "Visual Studio 16 2019" AND CMAKE_VS_PLATFORM_NAME_DEFAULT STREQUAL "ARM64")
        set(ATLAS_TARGET_ARCH "Arm64")
    elseif(CMAKE_GENERATOR STREQUAL "Visual Studio 16 2019")
        set(ATLAS_TARGET_ARCH "X64")
    elseif(CMAKE_GENERATOR STREQUAL "Visual Studio 17 2022" AND CMAKE_VS_PLATFORM_NAME_DEFAULT STREQUAL "ARM64")
        set(ATLAS_TARGET_ARCH "Arm64")
    elseif(CMAKE_GENERATOR STREQUAL "Visual Studio 17 2022")
        set(ATLAS_TARGET_ARCH "X64")
    elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin" AND DEFINED CMAKE_OSX_ARCHITECTURES)
        list(LENGTH CMAKE_OSX_ARCHITECTURES OSX_ARCH_COUNT)
        if(OSX_ARCH_COUNT EQUAL "0")
            message(WARNING "Unable to determine target architecture. "
                    "Consider providing a value for the CMAKE_OSX_ARCHITECTURES cache variable.")
            return()
        endif()

        if(OSX_ARCH_COUNT GREATER "1")
            message(WARNING "Detected more than one target architecture. Using the first one.")
        endif()
        list(GET CMAKE_OSX_ARCHITECTURES "0" OSX_TARGET_ARCH)
        if(OSX_TARGET_ARCH STREQUAL "arm64")
            set(ATLAS_TARGET_ARCH "Arm64")
        elseif(OSX_TARGET_ARCH STREQUAL "arm64s")
            set(ATLAS_TARGET_ARCH "arm64s")
        elseif(OSX_TARGET_ARCH STREQUAL "armv7s")
            set(ATLAS_TARGET_ARCH "armv7s")
        elseif(OSX_TARGET_ARCH STREQUAL "armv7")
            set(ATLAS_TARGET_ARCH "Arm")
        elseif(OSX_TARGET_ARCH STREQUAL "x86_64")
            set(ATLAS_TARGET_ARCH "X64")
        elseif(OSX_TARGET_ARCH STREQUAL "i386")
            set(ATLAS_TARGET_ARCH "X86")
        else()
            message(FATAL_ERROR "Unable to determine target architecture.")
            return()
        endif()
    else()
        find_program(PROGRAM_CL cl)
        if(PROGRAM_CL MATCHES "amd64/cl.exe$" OR PROGRAM_CL MATCHES "x64/cl.exe$")
            set(ATLAS_TARGET_ARCH "X64")
        elseif(PROGRAM_CL MATCHES "arm/cl.exe$")
            set(ATLAS_TARGET_ARCH "Arm")
        elseif(PROGRAM_CL MATCHES "arm64/cl.exe$")
            set(ATLAS_TARGET_ARCH "Arm64")
        elseif(PROGRAM_CL MATCHES "bin/cl.exe$" OR PROGRAM_CL MATCHES "x86/cl.exe$")
            set(ATLAS_TARGET_ARCH "X86")
        elseif(CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "x86_64" OR
                CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "AMD64" OR
                CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "amd64")
            set(ATLAS_TARGET_ARCH "X64")
        elseif(CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "armv7l")
            set(ATLAS_TARGET_ARCH "Arm")
        elseif(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "^(aarch64|arm64|ARM64)$")
            set(ATLAS_TARGET_ARCH "Arm64")
        else()
            message(FATAL_ERROR "Unable to determine target architecture.")
            return()
        endif()
    endif()
endif()