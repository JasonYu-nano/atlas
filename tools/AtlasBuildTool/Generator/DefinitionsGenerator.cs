// Copyright(c) 2023-present, Atlas.
// Distributed under the MIT License (http://opensource.org/licenses/MIT)

using System.Text;
using ToolCore.Utils;
using AtlasBuildTool.BuildTarget;

namespace AtlasBuildTool.Generator;

public class DefinitionsGenerator
{
    public DefinitionsGenerator(BuildTargetAssembly buildTargetAssembly)
    {
        _buildTargetAssembly = buildTargetAssembly;
    }

    public async Task GenerateAsync()
    {
        string intermediateDirectory = DirectoryUtils.BuildTargetIntermediateDirectory;
        if (!Directory.Exists(intermediateDirectory))
        {
            try
            {
                Directory.CreateDirectory(intermediateDirectory);
            }
            catch (Exception e)
            {
                throw new GeneratorException($"create build target intermediate directory failed. exception details: {e}");
            }
        }
        
        foreach (var nameToBuildTarget in _buildTargetAssembly.NameToBuildTargets)
        {
            string generateDirectory = $"{intermediateDirectory}/{nameToBuildTarget.Key}";
            if (!Directory.Exists(generateDirectory))
            {
                try
                {
                    Directory.CreateDirectory(generateDirectory);
                }
                catch (Exception e)
                {
                    throw new GeneratorException(
                        $"create build target generate directory failed. exception details: {e}");
                }
            }
            
            string content = GetDefinitionFileContent(nameToBuildTarget.Value);
            char[] encodedText = content.ToCharArray();
            string writeFile = $"{generateDirectory}/{nameToBuildTarget.Key}_definitions.hpp";
            
            try
            {
                await using StreamWriter sourceStream =
                    new StreamWriter(writeFile, false,
                        Encoding.UTF8);
                await sourceStream.WriteAsync(encodedText, 0, encodedText.Length);
            }
            catch (Exception e)
            {
                throw new GeneratorException($"write definition file failed. exception details: {e}");
            }
            finally
            {
                Console.WriteLine($"{writeFile} was generated");
            }
        }
    }

    private string GetDefinitionFileContent(BuildTargetBase buildTargetBase)
    {
        string upperName = buildTargetBase.TargetName.ToUpper(); 
        return $"""
                // THIS FILE IS GENERATED BY ATLAS BUILD TOOL.
                // DON'T PLAY WITH IT IF YOU DON'T KNOW WHAT YOU ARE DOING!
                
                #pragma once

                #ifdef {upperName}_API
                #undef {upperName}_API
                #endif

                #ifdef AE_SHARED
                #ifdef {upperName}_EXPORT
                    #define {upperName}_API DLL_EXPORT
                #else
                    #define {upperName}_API DLL_IMPORT
                #endif
                #else
                #define {upperName}_API
                #endif
                """;
    }

    private BuildTargetAssembly _buildTargetAssembly;
}