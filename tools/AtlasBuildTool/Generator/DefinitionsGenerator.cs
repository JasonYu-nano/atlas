// Copyright(c) 2023-present, Atlas.
// Distributed under the MIT License (http://opensource.org/licenses/MIT)

using System.Text;
using ToolCore.Utils;
using AtlasBuildTool.BuildTarget;

namespace AtlasBuildTool.Generator;

public class DefinitionsGenerator
{
    public DefinitionsGenerator(BuildTargetAssembly buildTargetAssembly)
    {
        _buildTargetAssembly = buildTargetAssembly;
    }

    public async Task GenerateAsync()
    {
        string intermediateDirectory = DirectoryUtils.BuildTargetIntermediateDirectory;
        if (!Directory.Exists(intermediateDirectory))
        {
            try
            {
                Directory.CreateDirectory(intermediateDirectory);
            }
            catch (Exception e)
            {
                throw new GeneratorException($"create build target intermediate directory failed. exception details: {e}");
            }
        }

        var tasks = new List<Task>();
        foreach (var nameToBuildTarget in _buildTargetAssembly.NameToBuildTargets)
        {
            string generateDirectory = $"{intermediateDirectory}/{nameToBuildTarget.Key}";
            if (!Directory.Exists(generateDirectory))
            {
                try
                {
                    Directory.CreateDirectory(generateDirectory);
                }
                catch (Exception e)
                {
                    throw new GeneratorException(
                        $"create build target generate directory failed. exception details: {e}");
                }
            }
            
            string content = GetDefinitionFileContent(nameToBuildTarget.Value);
            string writeFile = $"{generateDirectory}/{nameToBuildTarget.Key}_definitions.hpp";
            
            tasks.Add(WriteDefinitionFile(writeFile, content));
        }

        {
            var content = GetNoExportDefinitionFileContent(_buildTargetAssembly.NameToBuildTargets.Values.ToArray());
            string writeFile = $"{intermediateDirectory}/no_export_definitions.hpp";
            tasks.Add(WriteDefinitionFile(writeFile, content));
        }

        await Task.WhenAll(tasks.ToArray());
    }

    private async Task WriteDefinitionFile(string writeFile, string content)
    {
        char[] encodedText = content.ToCharArray();
        try
        {
            await using StreamWriter sourceStream =
                new StreamWriter(writeFile, false,
                    Encoding.UTF8);
            await (sourceStream.WriteAsync(encodedText, 0, encodedText.Length));
        }
        catch (Exception e)
        {
            throw new GeneratorException($"write definition file failed. exception details: {e}");
        }
        finally
        {
            Console.WriteLine($"{writeFile} was generated");
        }
    }

    private string GetDefinitionFileContent(BuildTargetBase buildTarget)
    {
        string upperName = buildTarget.TargetName.ToUpper();
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.AppendLine("""
                                 // THIS FILE IS GENERATED BY ATLAS BUILD TOOL.
                                 // DON'T PLAY WITH IT IF YOU DON'T KNOW WHAT YOU ARE DOING!

                                 #pragma once
                                 """);

        stringBuilder.AppendLine();
        stringBuilder.AppendLine($"#undef {upperName}_API");

        if (buildTarget.NeedExportSymbol())
        {
            stringBuilder.AppendLine();
            stringBuilder.AppendLine($"#define {upperName}_API DLL_EXPORT"); 
        }
        else
        {
            stringBuilder.AppendLine();
            stringBuilder.AppendLine($"#define {upperName}_API ");
        }

        var dependencies = new SortedSet<BuildTargetBase>();
        buildTarget.GetAllDependenciesBuildTargets(dependencies);
        foreach (var linkTarget in dependencies)
        {
            stringBuilder.AppendLine($"#define {linkTarget.TargetName.ToUpper()}_API DLL_IMPORT");
        }

        return stringBuilder.ToString();
    }

    private string GetNoExportDefinitionFileContent(BuildTargetBase[] buildTargets)
    {
        StringBuilder stringBuilder = new StringBuilder();
        foreach (var target in buildTargets)
        {
            stringBuilder.AppendLine($"#define {target.TargetName.ToUpper()}_API");
        }
        return stringBuilder.ToString();
    }

    private BuildTargetAssembly _buildTargetAssembly;
}