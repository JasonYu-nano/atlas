/*
 * Copyright(c) 2023-present, Atlas.
 * Distributed under the MIT License (http://opensource.org/licenses/MIT)
 */

package com.spacelion.atlas_builder.generator

import com.spacelion.atlas_builder.build_target.BuildTargetAssembly
import com.spacelion.atlas_builder.build_target.BuildTargetBase
import com.spacelion.tool_core.utility.DirectoryUtility
import kotlinx.coroutines.*
import java.io.File

class DefinitionsGenerator(val assembly: BuildTargetAssembly) {

    suspend fun generate() = coroutineScope {
        val sourceDir = File(DirectoryUtility.BUILD_TARGET_INTERMEDIATE_DIRECTORY)
        if (!sourceDir.exists()) {
            sourceDir.mkdirs()
        }

        val jobs = mutableListOf<Job>()
        for (buildTarget in assembly.buildTargets().values) {
            jobs.add(launch {
                val outputDir = File("${sourceDir}/${buildTarget.name}")
                if (!outputDir.exists()) {
                    outputDir.mkdirs()
                }

                val file = File("${outputDir}/${buildTarget.name}_definitions.hpp")
                if (!file.exists()) {
                    file.createNewFile()
                }
                file.writeText(getDefinitionContent(buildTarget))
                println("$file was generated")
            })
        }

        jobs.joinAll()
    }

    private fun getDefinitionContent(buildTarget: BuildTargetBase): String {
        val upperName = buildTarget.name.uppercase()
        val stringBuilder = StringBuilder()

        stringBuilder.appendLine("""
            // THIS FILE IS GENERATED BY ATLAS BUILD TOOL.
            // DON'T PLAY WITH IT IF YOU DON'T KNOW WHAT YOU ARE DOING!
            
            #pragma once
        """.trimIndent())

        stringBuilder.appendLine()
        stringBuilder.appendLine("#undef ${upperName}_API")

        if (buildTarget.exportSymbol()) {
            stringBuilder.appendLine()
            stringBuilder.appendLine("#define ${upperName}_API DLL_EXPORT")
        } else {
            stringBuilder.appendLine()
            stringBuilder.appendLine("#define ${upperName}_API ")
        }

        val dependencies: MutableSet<BuildTargetBase> = mutableSetOf()
        buildTarget.getDependenciesBuildTargets(dependencies)
        val dependenciesList = dependencies.toMutableList()
        dependenciesList.sortBy { it.name }
        for (linkTarget in dependenciesList) {
            stringBuilder.appendLine("#define ${linkTarget.name.uppercase()}_API DLL_IMPORT")
        }

        return stringBuilder.toString()
    }

}